/*! @getify/eslint-plugin-proper-ternary
	v3.0.1 (c) 2019 Kyle Simpson
	MIT License: http://getify.mit-license.org
*/

"use strict";function parensSurrounding(e,t){var r=e.getTokenBefore(t),n=e.getTokenAfter(t);return r&&"Punctuator"==r.type&&"("==r.value&&n&&"Punctuator"==n.type&&")"==n.value}function getOutermostTernary(e){var t;for(let r of[...e].reverse())if("ConditionalExpression"==r.type)t=r;else if(r.type.includes("Statement")||r.type.includes("Declarat")||r.type.includes("Assignment"))return t}function identifyParentClause(e,t){var r=e;for(let e of[...t].reverse()){if("ConditionalExpression"==e.type){if(e.test===r)return"test";if(e.consequent===r)return"then";if(e.alternate===r)return"else"}r=e}}module.exports={configs:{"getify-says":{plugins:["@getify/proper-ternary"],rules:{"@getify/proper-ternary/nested":["error",{else:!0,depth:10}],"@getify/proper-ternary/parens":["error",{ternary:!1,call:!1,object:!1}],"@getify/proper-ternary/where":["error",{return:!1}]}}},rules:{nested:{meta:{type:"problem",docs:{description:"Control the kind and depth of nesting allowed with ternary/conditional expressions",category:"Best Practices",url:"https://github.com/getify/eslint-plugin-proper-ternary/#rule-nested"},schema:[{type:"object",properties:{test:{type:"boolean"},then:{type:"boolean"},else:{type:"boolean"},depth:{type:"integer",min:1}}}],messages:{tooDeep:"Ternary expression nested too deeply",notHere:"Ternary expression cannot be nested in another ternary expression '{{whichClause}}' clause ({{pattern}})"}},create(e){var t=0==e.options.length,r=t?null:e.options[0],n=!t&&r&&!0===r.test,a=!t&&r&&!0===r.then,o=!t&&r&&!0===r.else,s=!t&&"depth"in r?r.depth:1,p=new Map;return{ConditionalExpression:function enter(t){var r=e.getAncestors(),i=getOutermostTernary(r);if(i){p.has(i)||p.set(i,[]);let l=p.get(i);l.push(t),!l.depthReported&&l.length>s&&(l.depthReported=!0,e.report({node:l[s],messageId:"tooDeep"}));let u=identifyParentClause(t,r);if("test"==u&&!n||"then"==u&&!a||"else"==u&&!o){let r="test"==u?"▁ ? ░░ : ░░":"then"==u?"░░ ? ▁ : ░░":"░░ ? ░░ : ▁";e.report({node:t,messageId:"notHere",data:{whichClause:u,pattern:r}})}}}}}},parens:{meta:{type:"problem",docs:{description:"Require ( .. ) parentheses delimiting for ternary clauses based on the type of expression",category:"Best Practices",url:"https://github.com/getify/eslint-plugin-proper-ternary/#rule-parens"},schema:[{type:"object",properties:{ternary:{type:"boolean"},comparison:{type:"boolean"},logical:{type:"boolean"},call:{type:"boolean"},object:{type:"boolean"},simple:{type:"boolean"}}}],messages:{needParens:"Ternary clause expression requires enclosing ( .. )"}},create(e){var t=0==e.options.length,r=t?null:e.options[0],n=t||!("ternary"in r)||!0===r.ternary,a=t||!("comparison"in r)||!0===r.comparison,o=t||!("logical"in r)||!0===r.logical,s=t||!("call"in r)||!0===r.call,p=t||!("object"in r)||!0===r.object,i=!t&&r&&!0===r.simple,l=e.getSourceCode();return{ConditionalExpression:function enter(t){for(let r of[t.test,t.consequent,t.alternate]){let t="ConditionalExpression"==r.type?"ternary":"BinaryExpression"==r.type&&["==","===","!=","!==","<",">","<=",">=","in","instanceof"].includes(r.operator)?"comparison":"LogicalExpression"==r.type?"logical":"UnaryExpression"==r.type&&"!"==r.operator?"logical":["CallExpression","NewExpression"].includes(r.type)?"call":["ArrayExpression","ObjectExpression"].includes(r.type)?"object":["Identifier","MemberExpression","Literal","TemplateLiteral"].includes(r.type)?"simple":"complex";(n&&"ternary"==t||a&&"comparison"==t||o&&"logical"==t||s&&"call"==t||p&&"object"==t||i&&"simple"==t||"complex"==t)&&!parensSurrounding(l,r)&&e.report({node:r,messageId:"needParens"})}}}}},where:{meta:{type:"problem",docs:{description:"Restrict where in program structure ternary expressions can be used",category:"Best Practices",url:"https://github.com/getify/eslint-plugin-proper-ternary/#rule-where"},schema:[{type:"object",properties:{statement:{type:"boolean"},property:{type:"boolean"},argument:{type:"boolean"},return:{type:"boolean"},default:{type:"boolean"},sub:{type:"boolean"},asssignment:{type:"boolean"}}}],messages:{notHere:"Ternary expression cannot be used {{usage}}"}},create(e){var t=0==e.options.length,r=t?null:e.options[0],n=t||!("statement"in r)||!0===r.statement,a=t||!("property"in r)||!0===r.property,o=t||!("argument"in r)||!0===r.argument,s=t||!("return"in r)||!0===r.return,p=t||!("default"in r)||!0===r.default,i=t||!("sub"in r)||!0===r.sub,l=!t&&r&&!0===r.assignment;return{ConditionalExpression:function enter(t){n&&"ExpressionStatement"==t.parent.type&&t.parent.expression==t&&e.report({node:t,messageId:"notHere",data:{usage:"as a standalone statement"}}),a&&("Property"==t.parent.type&&t.parent.value==t?e.report({node:t,messageId:"notHere",data:{usage:"in an object property"}}):"ArrayExpression"==t.parent.type&&t.parent.elements.includes(t)&&e.report({node:t,messageId:"notHere",data:{usage:"in an array element position"}})),o&&["CallExpression","NewExpression"].includes(t.parent.type)&&t.parent.arguments.includes(t)&&e.report({node:t,messageId:"notHere",data:{usage:"as a function call argument"}}),s&&("ReturnStatement"==t.parent.type&&t.parent.argument==t?e.report({node:t,messageId:"notHere",data:{usage:"as a function return"}}):"ArrowFunctionExpression"==t.parent.type&&t.parent.body==t&&e.report({node:t,messageId:"notHere",data:{usage:"as a function return"}})),p&&"AssignmentPattern"==t.parent.type&&t.parent.right==t&&e.report({node:t,messageId:"notHere",data:{usage:"as a default value assignment"}}),i&&("UnaryExpression"==t.parent.type&&t.parent.argument==t?e.report({node:t,messageId:"notHere",data:{usage:"in a unary operator expression"}}):"BinaryExpression"!=t.parent.type||t.parent.left!=t&&t.parent.right!=t||e.report({node:t,messageId:"notHere",data:{usage:"in a binary operator expression"}})),l&&("VariableDeclarator"==t.parent.type&&t.parent.init==t?e.report({node:t,messageId:"notHere",data:{usage:"in a declaration assignment"}}):"AssignmentExpression"==t.parent.type&&t.parent.right==t&&e.report({node:t,messageId:"notHere",data:{usage:"in an assignment"}}))}}}}}};